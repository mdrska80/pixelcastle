using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using Castles.Conf;
using Castles.gameObjects;
using Castles.gameObjects.items;
using SdlDotNet.Graphics;
using SdlDotNet.Graphics.Sprites;

namespace Castles.Views
{
    public class levelView : BaseView
    {
        public Surface screen { get; set; }
        public Random r { get; set; }
        public Surface sPlatform  {get;set;}
		public Surface sGem  {get;set;}
        public Surface sCauldron  {get;set;}
        public Surface sBarrel  {get;set;}
        public Surface sBox  {get;set;}
        public Surface sBucket { get; set; }

        public int halfwidth = 24;
        public int halfheight = 6;
        public int step = 18;


        /// <summary>
        /// index is height
        /// </summary>
        public List<Surface> sColumns {get;set;} 

        public bool sInited = false;


        public levelView(ResourceManager resourceManager, Point origin) : base(resourceManager, origin)
        {
            r = new Random();
            sPlatform = resourceManager.GetGfx("platformPA.png");
			sGem = resourceManager.GetGfx("GemCrime.png");
            sCauldron = resourceManager.GetGfx("Cauldron.png");
            sBarrel = resourceManager.GetGfx("Barrel.png");
            sBox = resourceManager.GetGfx("Box.png");
            sBucket = resourceManager.GetGfx("Bucket.png");
        }

        public override void UpdateView(Surface surf)
        {
            if (CastlesConfigurationReader.GetConfiguration().PermaLevelReloading)
                if (Game.I.level != null)
                    Game.I.level = Game.I.level.Reload();
                else
                    Game.I.level = Level.Load(1, 1);

            Level level = Game.I.level;
            List<Monster> monsters = Game.I.level.Monsters;

            if ((level != null) && (level.Layers != null))
            {
                //if (!sInited)
                {
                    //sBackup = surf.CreateCompatibleSurface();

                    //earch layer can have its own surface....

                    foreach (Layer l in level.Layers)
                    {
                        if (l.Platforms != null)
                        {
                            foreach (var platform in l.Platforms)
                            {

                                Point p = OP(platform.x*halfwidth,
                                             platform.x*halfheight + platform.y*step - l.id*halfheight);

                                Surface s = null;
                                if (
                                    (platform.isHighLighted) &&
                                    (CastlesConfigurationReader.GetConfiguration().HighlightPathfinding))
                                    s = resourceManager.Cache_gfx["platformHOLight.png"];
                                else
                                    s = resourceManager.Cache_gfx[platform.gfx];

                                Game.I.surfaces++;
                                surf.Blit(s, p);
                                //sBackup.Blit(s, p);

                            }
                        }
                    }

                    //sInited = true;
                }
                //blit level...
                //surf.Blit(sBackup, new Point(0, 0));
            
                foreach (Layer l in level.Layers)
                {
                    if (l.Platforms != null)
                    {
                        foreach (var platform in l.Platforms)
                        {
                         //   Game.I.surfaces++;
                            Point p = OP(platform.x * halfwidth, platform.x * halfheight + platform.y * step - l.id * halfheight);
                           // surf.Blit(sPlatform, p);

							//is there a gem on the platform?
							if (platform.item is Gem)
							{
							    Gem g = platform.item as Gem;
								//draw gem
							    if (!g.picked)
							    {
							        Game.I.surfaces++;
							        surf.Blit(sGem, new Point(p.X + 15, p.Y - 7));
							    }
							}

                            if (platform.item is HoneyCauldron)
                            {
                                //draw cauldron
                                Game.I.surfaces++;
                                surf.Blit(sCauldron, new Point(p.X + 5, p.Y - 23));

                            }

                            if (platform.item is Barrel)
                            {
                                //draw barrel
                                Game.I.surfaces++;
                                surf.Blit(sBarrel, new Point(p.X + 5, p.Y - 23));
                            }

                            if (platform.item is Box)
                            {
                                //draw box
                                Game.I.surfaces++;
                                surf.Blit(sBox, new Point(p.X + 5, p.Y - 23));
                            }

                            if (platform.item is Bucket)
                            {
                                //draw bucket
                                // what is the point of bucket?
                                Game.I.surfaces++;
                                surf.Blit(sBucket, new Point(p.X + 13, p.Y - sBucket.Height + 14));
                            }



                            //is there a monster on this pos?
                            var mx = (from m in monsters
                                where m.position.X == platform.x &&
                                m.position.Y == platform.y &&
                                m.position.Layer == l.id select m).FirstOrDefault();

                            if (mx!=null)
                            {
                                if (mx.isAlive)
                                {
                                    Game.I.surfaces++;
                                    surf.Blit(mx.sprite, new Point(p.X + mx.ShiftX, p.Y - mx.sprite.Height+mx.ShiftY));
                                }                                
                            }

                            //draw player
                            if (
                                Game.I.player.position.X == platform.x
                                &&
                                Game.I.player.position.Y == platform.y
                                &&
                                Game.I.player.position.Layer == l.id

                                )
                            {
                                if (Game.I.player.isAlive)
                                {
                                    Game.I.surfaces++;
                                    surf.Blit(Game.I.player.sprite, new Point(p.X, p.Y - Game.I.player.sprite.Height + 18));
                                }
                            }
                        }
                    }
                }
            }

        }
    }
}
